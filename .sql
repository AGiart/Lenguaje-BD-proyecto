--------------------------------------------------------
-- Archivo creado  - miércoles-diciembre-06-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence AUTORES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."AUTORES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence BOOKID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."BOOKID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EDITORIALES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."EDITORIALES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence GENEROS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."GENEROS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IDIOMAS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."IDIOMAS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LIBROS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."LIBROS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LOAN_ID_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."LOAN_ID_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence MULTAS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."MULTAS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRESTAMO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."PRESTAMO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRESTAMOS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."PRESTAMOS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_MULTA
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."SEQ_MULTA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 75 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUTORES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."AUTORES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EDITORIALES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."EDITORIALES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence GENEROS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."GENEROS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IDIOMAS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."IDIOMAS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LIBROS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."LIBROS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence MULTAS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."MULTAS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRESTAMO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."PRESTAMO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_MULTA
--------------------------------------------------------

   CREATE SEQUENCE  "ADMINPBIBLIOTECA"."SEQ_MULTA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 75 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table AUTORES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."AUTORES" 
   (	"AUTORID" NUMBER, 
	"NOMBREAUTOR" VARCHAR2(50 BYTE), 
	"APELLIDOAUTOR" VARCHAR2(50 BYTE), 
	"NACIONALIDADID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEVOLUCION
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."DEVOLUCION" 
   (	"DEVOLUCIONID" NUMBER, 
	"PRESTAMOID" NUMBER, 
	"FECHADEVOLUCION" DATE, 
	"USUARIOCEDULA" NUMBER, 
	"LIBROID" NUMBER, 
	"OBSERVACIONES" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("OBSERVACIONES") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table EDITORIALES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."EDITORIALES" 
   (	"PUBLISHERID" NUMBER, 
	"NOMBREEDITORIAL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GENEROS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."GENEROS" 
   (	"GENREID" NUMBER, 
	"NOMBREGENERO" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IDIOMAS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."IDIOMAS" 
   (	"LANGUAGEID" NUMBER, 
	"NOMBREIDIOMA" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LIBROS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."LIBROS" 
   (	"BOOKID" NUMBER, 
	"TITULO" VARCHAR2(100 BYTE), 
	"AUTORID" NUMBER, 
	"GENEROID" NUMBER, 
	"EDITORIALID" NUMBER, 
	"IDIOMAID" NUMBER, 
	"ANIOPUBLICACION" NUMBER, 
	"ISBN" VARCHAR2(20 BYTE), 
	"CANTIDADCOPIASDISPONIBLES" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MULTAS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."MULTAS" 
   (	"MULTAID" NUMBER, 
	"PRESTAMOID" NUMBER, 
	"USUARIOCEDULA" NUMBER, 
	"MONTO" NUMBER, 
	"FECHACREACION" DATE, 
	"ESTADO" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table NACIONALIDADES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."NACIONALIDADES" 
   (	"NACIONALIDADID" NUMBER, 
	"NOMBRENACIONALIDAD" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRESTAMO
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."PRESTAMO" 
   (	"PRESTAMOID" NUMBER, 
	"FECHAPRESTAMO" DATE, 
	"FECHADEVOLUCION" DATE, 
	"USUARIOCEDULA" NUMBER, 
	"LIBROID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."ROLES" 
   (	"ROLID" NUMBER, 
	"NOMBRE_ROL" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USUARIOS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."USUARIOS" 
   (	"CEDULA" NUMBER, 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"APELLIDO" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"CONTRASENA" VARCHAR2(150 BYTE), 
	"ROLID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table NACIONALIDADES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."NACIONALIDADES" 
   (	"NACIONALIDADID" NUMBER, 
	"NOMBRENACIONALIDAD" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LIBROS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."LIBROS" 
   (	"BOOKID" NUMBER, 
	"TITULO" VARCHAR2(100 BYTE), 
	"AUTORID" NUMBER, 
	"GENEROID" NUMBER, 
	"EDITORIALID" NUMBER, 
	"IDIOMAID" NUMBER, 
	"ANIOPUBLICACION" NUMBER, 
	"ISBN" VARCHAR2(20 BYTE), 
	"CANTIDADCOPIASDISPONIBLES" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRESTAMO
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."PRESTAMO" 
   (	"PRESTAMOID" NUMBER, 
	"FECHAPRESTAMO" DATE, 
	"FECHADEVOLUCION" DATE, 
	"USUARIOCEDULA" NUMBER, 
	"LIBROID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USUARIOS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."USUARIOS" 
   (	"CEDULA" NUMBER, 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"APELLIDO" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"CONTRASENA" VARCHAR2(150 BYTE), 
	"ROLID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTORES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."AUTORES" 
   (	"AUTORID" NUMBER, 
	"NOMBREAUTOR" VARCHAR2(50 BYTE), 
	"APELLIDOAUTOR" VARCHAR2(50 BYTE), 
	"NACIONALIDADID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EDITORIALES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."EDITORIALES" 
   (	"PUBLISHERID" NUMBER, 
	"NOMBREEDITORIAL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GENEROS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."GENEROS" 
   (	"GENREID" NUMBER, 
	"NOMBREGENERO" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IDIOMAS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."IDIOMAS" 
   (	"LANGUAGEID" NUMBER, 
	"NOMBREIDIOMA" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLES
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."ROLES" 
   (	"ROLID" NUMBER, 
	"NOMBRE_ROL" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MULTAS
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."MULTAS" 
   (	"MULTAID" NUMBER, 
	"PRESTAMOID" NUMBER, 
	"USUARIOCEDULA" NUMBER, 
	"MONTO" NUMBER, 
	"FECHACREACION" DATE, 
	"ESTADO" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEVOLUCION
--------------------------------------------------------

  CREATE TABLE "ADMINPBIBLIOTECA"."DEVOLUCION" 
   (	"DEVOLUCIONID" NUMBER, 
	"PRESTAMOID" NUMBER, 
	"FECHADEVOLUCION" DATE, 
	"USUARIOCEDULA" NUMBER, 
	"LIBROID" NUMBER, 
	"OBSERVACIONES" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("OBSERVACIONES") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for View V_AUTORES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_AUTORES" ("AUTORID", "NOMBREAUTOR", "APELLIDOAUTOR", "NACIONALIDADID") AS 
  SELECT "AUTORID","NOMBREAUTOR","APELLIDOAUTOR","NACIONALIDADID" FROM autores
;
--------------------------------------------------------
--  DDL for View V_EDITORIALES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_EDITORIALES" ("PUBLISHERID", "NOMBREEDITORIAL") AS 
  SELECT "PUBLISHERID","NOMBREEDITORIAL" FROM editoriales
;
--------------------------------------------------------
--  DDL for View V_GENEROS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_GENEROS" ("GENREID", "NOMBREGENERO") AS 
  SELECT "GENREID","NOMBREGENERO" FROM generos
;
--------------------------------------------------------
--  DDL for View V_IDIOMAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_IDIOMAS" ("LANGUAGEID", "NOMBREIDIOMA") AS 
  SELECT "LANGUAGEID","NOMBREIDIOMA" FROM idiomas
;
--------------------------------------------------------
--  DDL for View VISTALIBROS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTALIBROS" ("BOOKID", "TITULO", "NOMBRECOMPLETOAUTOR", "NOMBREGENERO", "NOMBREEDITORIAL", "ANIOPUBLICACION", "ISBN", "CANTIDADCOPIASDISPONIBLES") AS 
  SELECT
    L.BookID,
    L.Titulo,
    A.NombreAutor || ' ' || A.ApellidoAutor AS NombreCompletoAutor,
    G.NombreGenero,
    E.NombreEditorial,
    L.AnioPublicacion,
    L.ISBN,
    L.CantidadCopiasDisponibles
FROM
    Libros L
    INNER JOIN Autores A ON L.AutorID = A.AutorID
    INNER JOIN Generos G ON L.GeneroID = G.GenreID
    INNER JOIN Editoriales E ON L.EditorialID = E.PublisherID
;
--------------------------------------------------------
--  DDL for View VISTALIBROSPORGENERO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTALIBROSPORGENERO" ("BOOKID", "TITULO", "AUTORID", "GENEROID", "EDITORIALID", "IDIOMAID", "ANIOPUBLICACION", "ISBN", "CANTIDADCOPIASDISPONIBLES", "NOMBREGENERO") AS 
  SELECT L."BOOKID",L."TITULO",L."AUTORID",L."GENEROID",L."EDITORIALID",L."IDIOMAID",L."ANIOPUBLICACION",L."ISBN",L."CANTIDADCOPIASDISPONIBLES", G.NombreGenero
FROM Libros L
JOIN Generos G ON L.GeneroID = G.GenreID
;
--------------------------------------------------------
--  DDL for View VISTAPRESTAMOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTAPRESTAMOS" ("PRESTAMOID", "FECHAPRESTAMO", "FECHADEVOLUCION", "NOMBREUSUARIO", "LIBROID", "TITULOLIBRO") AS 
  SELECT
    P.PrestamoID,
    P.FechaPrestamo,
    P.FechaDevolucion,
    U.nombre AS NombreUsuario,
    P.LibroID,
    L.Titulo AS TituloLibro
FROM Prestamo P
INNER JOIN Usuarios U ON P.UsuarioCedula = U.Cedula
INNER JOIN Libros L ON P.LibroID = L.BookID
;
--------------------------------------------------------
--  DDL for View VISTAPRESTAMOSACTIVOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTAPRESTAMOSACTIVOS" ("LOANID", "USERID", "BOOKID", "FECHAINICIO", "FECHADEVOLUCIONPREVISTA") AS 
  SELECT "LOANID","USERID","BOOKID","FECHAINICIO","FECHADEVOLUCIONPREVISTA" FROM Prestamos
WHERE fechadevolucionprevista IS NULL
;
--------------------------------------------------------
--  DDL for View VISTAPRESTAMOSVENCIDOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTAPRESTAMOSVENCIDOS" ("LOANID", "USERID", "BOOKID", "FECHAINICIO", "FECHADEVOLUCIONPREVISTA") AS 
  SELECT "LOANID","USERID","BOOKID","FECHAINICIO","FECHADEVOLUCIONPREVISTA"
FROM Prestamos
WHERE FechaDevolucionPrevista IS NULL
AND FechaDevolucionPrevista < SYSDATE
;
--------------------------------------------------------
--  DDL for View VISTA_ROLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTA_ROLES" ("ROLID", "NOMBRE_ROL") AS 
  SELECT
    r.ROLID,
    r.NOMBRE_rol
FROM
    roles r
;
--------------------------------------------------------
--  DDL for View V_LIBROS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_LIBROS" ("BOOKID", "TITULO", "AUTORID", "GENEROID", "EDITORIALID", "IDIOMAID", "ANIOPUBLICACION", "ISBN", "CANTIDADCOPIASDISPONIBLES") AS 
  SELECT "BOOKID","TITULO","AUTORID","GENEROID","EDITORIALID","IDIOMAID","ANIOPUBLICACION","ISBN","CANTIDADCOPIASDISPONIBLES" FROM libros
;
--------------------------------------------------------
--  DDL for View V_MULTAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_MULTAS" ("FINEID", "USERID", "AMOUNT", "BOOKID", "FECHAEMISION", "MOTIVOMULTA", "FECHAPAGO", "ESTADOMULTA") AS 
  SELECT "FINEID","USERID","AMOUNT","BOOKID","FECHAEMISION","MOTIVOMULTA","FECHAPAGO","ESTADOMULTA" FROM multas
;
--------------------------------------------------------
--  DDL for View V_PRESTAMOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_PRESTAMOS" ("LOANID", "USERID", "BOOKID", "FECHAINICIO", "FECHADEVOLUCIONPREVISTA", "ESTADO_PRESTAMO") AS 
  SELECT "LOANID","USERID","BOOKID","FECHAINICIO","FECHADEVOLUCIONPREVISTA","ESTADO_PRESTAMO" FROM prestamos
;
--------------------------------------------------------
--  DDL for View V_USUARIOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."V_USUARIOS" ("USERID", "NOMBRE", "APELLIDO", "EMAIL", "CONTRASENA") AS 
  SELECT "USERID","NOMBRE","APELLIDO","EMAIL","CONTRASENA" FROM usuarios
;
--------------------------------------------------------
--  DDL for View VISTA_ROLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "ADMINPBIBLIOTECA"."VISTA_ROLES" ("ROLID", "NOMBRE_ROL") AS 
  SELECT
    r.ROLID,
    r.NOMBRE_rol
FROM
    roles r
;
REM INSERTING into ADMINPBIBLIOTECA.AUTORES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('6','Jason','Jason','2');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('7','Jason','Jason','1');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('8','Jason','Jason','1');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('1','Carlos','Ruiz Zafón','1');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('2','Gabriel','García Márquez','2');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('3','George','Orwell','3');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('4','J.K.','Rowling','1');
Insert into ADMINPBIBLIOTECA.AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('5','Harper','Lee','1');
REM INSERTING into ADMINPBIBLIOTECA.DEVOLUCION
SET DEFINE OFF;
REM INSERTING into ADMINPBIBLIOTECA.EDITORIALES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('21','Ban');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('6','Cars');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('7','Universal');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('1','Pertum');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('2','Diana');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('3','Distopia');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('4','Salamandra');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('5','J.B. Lippincott ');
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('41',null);
Insert into ADMINPBIBLIOTECA.EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('42','Pan');
REM INSERTING into ADMINPBIBLIOTECA.GENEROS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('21','Oscuro');
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('22','Distopico');
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('1','Misterio');
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('2','Realismo mágico');
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('3','Distopía');
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('4','Fantasía');
Insert into ADMINPBIBLIOTECA.GENEROS (GENREID,NOMBREGENERO) values ('5','Ficción clásica');
REM INSERTING into ADMINPBIBLIOTECA.IDIOMAS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.IDIOMAS (LANGUAGEID,NOMBREIDIOMA) values ('2','INGLES');
Insert into ADMINPBIBLIOTECA.IDIOMAS (LANGUAGEID,NOMBREIDIOMA) values ('1','Español');
REM INSERTING into ADMINPBIBLIOTECA.LIBROS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.LIBROS (BOOKID,TITULO,AUTORID,GENEROID,EDITORIALID,IDIOMAID,ANIOPUBLICACION,ISBN,CANTIDADCOPIASDISPONIBLES) values ('124','Hunger Gamesss','8','2','3','1','2002','12313','12');
REM INSERTING into ADMINPBIBLIOTECA.MULTAS
SET DEFINE OFF;
REM INSERTING into ADMINPBIBLIOTECA.NACIONALIDADES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.NACIONALIDADES (NACIONALIDADID,NOMBRENACIONALIDAD) values ('1','Española');
Insert into ADMINPBIBLIOTECA.NACIONALIDADES (NACIONALIDADID,NOMBRENACIONALIDAD) values ('2','Colombiana');
Insert into ADMINPBIBLIOTECA.NACIONALIDADES (NACIONALIDADID,NOMBRENACIONALIDAD) values ('3','Inglesa');
REM INSERTING into ADMINPBIBLIOTECA.PRESTAMO
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.PRESTAMO (PRESTAMOID,FECHAPRESTAMO,FECHADEVOLUCION,USUARIOCEDULA,LIBROID) values ('30',to_date('07-DIC-23','DD-MON-RR'),to_date('22-DIC-23','DD-MON-RR'),'1','124');
Insert into ADMINPBIBLIOTECA.PRESTAMO (PRESTAMOID,FECHAPRESTAMO,FECHADEVOLUCION,USUARIOCEDULA,LIBROID) values ('31',to_date('06-DIC-23','DD-MON-RR'),to_date('07-DIC-23','DD-MON-RR'),'1','124');
REM INSERTING into ADMINPBIBLIOTECA.ROLES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.ROLES (ROLID,NOMBRE_ROL) values ('1','ADMIN');
Insert into ADMINPBIBLIOTECA.ROLES (ROLID,NOMBRE_ROL) values ('2','STAFF');
Insert into ADMINPBIBLIOTECA.ROLES (ROLID,NOMBRE_ROL) values ('3','LECTOR');
REM INSERTING into ADMINPBIBLIOTECA.USUARIOS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.USUARIOS (CEDULA,NOMBRE,APELLIDO,EMAIL,CONTRASENA,ROLID) values ('1','Admin','Admin','admin@example.com','contrasena_admin','1');
Insert into ADMINPBIBLIOTECA.USUARIOS (CEDULA,NOMBRE,APELLIDO,EMAIL,CONTRASENA,ROLID) values ('2','Staff','Staff','staff@example.com','contrasena_staff','2');
Insert into ADMINPBIBLIOTECA.USUARIOS (CEDULA,NOMBRE,APELLIDO,EMAIL,CONTRASENA,ROLID) values ('3322','Alisson','Alisson','Alichzz@gmail.com','232','3');
Insert into ADMINPBIBLIOTECA.USUARIOS (CEDULA,NOMBRE,APELLIDO,EMAIL,CONTRASENA,ROLID) values ('3','Jason','Jason','jimenedszcarjason35@gmail.com','1','1');
Insert into ADMINPBIBLIOTECA.USUARIOS (CEDULA,NOMBRE,APELLIDO,EMAIL,CONTRASENA,ROLID) values ('332','Alisson','Alisson','Alichzz@gmail.com','232','1');
REM INSERTING into ADMINPBIBLIOTECA.V_AUTORES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('6','Jason','Jason','2');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('7','Jason','Jason','1');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('8','Jason','Jason','1');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('1','Carlos','Ruiz Zafón','1');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('2','Gabriel','García Márquez','2');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('3','George','Orwell','3');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('4','J.K.','Rowling','1');
Insert into ADMINPBIBLIOTECA.V_AUTORES (AUTORID,NOMBREAUTOR,APELLIDOAUTOR,NACIONALIDADID) values ('5','Harper','Lee','1');
REM INSERTING into ADMINPBIBLIOTECA.V_EDITORIALES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('21','Ban');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('6','Cars');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('7','Universal');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('1','Pertum');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('2','Diana');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('3','Distopia');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('4','Salamandra');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('5','J.B. Lippincott ');
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('41',null);
Insert into ADMINPBIBLIOTECA.V_EDITORIALES (PUBLISHERID,NOMBREEDITORIAL) values ('42','Pan');
REM INSERTING into ADMINPBIBLIOTECA.V_GENEROS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('21','Oscuro');
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('22','Distopico');
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('1','Misterio');
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('2','Realismo mágico');
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('3','Distopía');
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('4','Fantasía');
Insert into ADMINPBIBLIOTECA.V_GENEROS (GENREID,NOMBREGENERO) values ('5','Ficción clásica');
REM INSERTING into ADMINPBIBLIOTECA.V_IDIOMAS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.V_IDIOMAS (LANGUAGEID,NOMBREIDIOMA) values ('2','INGLES');
Insert into ADMINPBIBLIOTECA.V_IDIOMAS (LANGUAGEID,NOMBREIDIOMA) values ('1','Español');
REM INSERTING into ADMINPBIBLIOTECA.VISTALIBROS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.VISTALIBROS (BOOKID,TITULO,NOMBRECOMPLETOAUTOR,NOMBREGENERO,NOMBREEDITORIAL,ANIOPUBLICACION,ISBN,CANTIDADCOPIASDISPONIBLES) values ('124','Hunger Gamesss','Jason Jason','Realismo mágico','Distopia','2002','12313','12');
REM INSERTING into ADMINPBIBLIOTECA.VISTALIBROSPORGENERO
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.VISTALIBROSPORGENERO (BOOKID,TITULO,AUTORID,GENEROID,EDITORIALID,IDIOMAID,ANIOPUBLICACION,ISBN,CANTIDADCOPIASDISPONIBLES,NOMBREGENERO) values ('124','Hunger Gamesss','8','2','3','1','2002','12313','12','Realismo mágico');
REM INSERTING into ADMINPBIBLIOTECA.VISTAPRESTAMOS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.VISTAPRESTAMOS (PRESTAMOID,FECHAPRESTAMO,FECHADEVOLUCION,NOMBREUSUARIO,LIBROID,TITULOLIBRO) values ('31',to_date('06-DIC-23','DD-MON-RR'),to_date('07-DIC-23','DD-MON-RR'),'Admin','124','Hunger Gamesss');
Insert into ADMINPBIBLIOTECA.VISTAPRESTAMOS (PRESTAMOID,FECHAPRESTAMO,FECHADEVOLUCION,NOMBREUSUARIO,LIBROID,TITULOLIBRO) values ('30',to_date('07-DIC-23','DD-MON-RR'),to_date('22-DIC-23','DD-MON-RR'),'Admin','124','Hunger Gamesss');
REM INSERTING into ADMINPBIBLIOTECA.VISTAPRESTAMOSACTIVOS
SET DEFINE OFF;
REM INSERTING into ADMINPBIBLIOTECA.VISTAPRESTAMOSVENCIDOS
SET DEFINE OFF;
REM INSERTING into ADMINPBIBLIOTECA.VISTA_ROLES
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.VISTA_ROLES (ROLID,NOMBRE_ROL) values ('1','ADMIN');
Insert into ADMINPBIBLIOTECA.VISTA_ROLES (ROLID,NOMBRE_ROL) values ('2','STAFF');
Insert into ADMINPBIBLIOTECA.VISTA_ROLES (ROLID,NOMBRE_ROL) values ('3','LECTOR');
REM INSERTING into ADMINPBIBLIOTECA.V_LIBROS
SET DEFINE OFF;
Insert into ADMINPBIBLIOTECA.V_LIBROS (BOOKID,TITULO,AUTORID,GENEROID,EDITORIALID,IDIOMAID,ANIOPUBLICACION,ISBN,CANTIDADCOPIASDISPONIBLES) values ('124','Hunger Gamesss','8','2','3','1','2002','12313','12');
REM INSERTING into ADMINPBIBLIOTECA.V_MULTAS
SET DEFINE OFF;
REM INSERTING into ADMINPBIBLIOTECA.V_PRESTAMOS
SET DEFINE OFF;
REM INSERTING into ADMINPBIBLIOTECA.V_USUARIOS
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index SYS_C007931
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007931" ON "ADMINPBIBLIOTECA"."NACIONALIDADES" ("NACIONALIDADID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007932
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007932" ON "ADMINPBIBLIOTECA"."AUTORES" ("AUTORID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007934
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007934" ON "ADMINPBIBLIOTECA"."GENEROS" ("GENREID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007935
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007935" ON "ADMINPBIBLIOTECA"."EDITORIALES" ("PUBLISHERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007936
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007936" ON "ADMINPBIBLIOTECA"."IDIOMAS" ("LANGUAGEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007938
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007938" ON "ADMINPBIBLIOTECA"."LIBROS" ("BOOKID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008188
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008188" ON "ADMINPBIBLIOTECA"."ROLES" ("ROLID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008193
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008193" ON "ADMINPBIBLIOTECA"."USUARIOS" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008222
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008222" ON "ADMINPBIBLIOTECA"."PRESTAMO" ("PRESTAMOID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008231
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008231" ON "ADMINPBIBLIOTECA"."MULTAS" ("MULTAID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008328
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008328" ON "ADMINPBIBLIOTECA"."DEVOLUCION" ("DEVOLUCIONID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_IL0000082893C00006$$
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_IL0000082893C00006$$" ON "ADMINPBIBLIOTECA"."DEVOLUCION" (
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE( INITIAL 65536 NEXT 1048576 MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
  PARALLEL (DEGREE 0 INSTANCES 0) ;
--------------------------------------------------------
--  DDL for Index SYS_C007932
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007932" ON "ADMINPBIBLIOTECA"."AUTORES" ("AUTORID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008328
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008328" ON "ADMINPBIBLIOTECA"."DEVOLUCION" ("DEVOLUCIONID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007935
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007935" ON "ADMINPBIBLIOTECA"."EDITORIALES" ("PUBLISHERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007934
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007934" ON "ADMINPBIBLIOTECA"."GENEROS" ("GENREID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007936
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007936" ON "ADMINPBIBLIOTECA"."IDIOMAS" ("LANGUAGEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007938
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007938" ON "ADMINPBIBLIOTECA"."LIBROS" ("BOOKID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008231
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008231" ON "ADMINPBIBLIOTECA"."MULTAS" ("MULTAID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C007931
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C007931" ON "ADMINPBIBLIOTECA"."NACIONALIDADES" ("NACIONALIDADID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008222
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008222" ON "ADMINPBIBLIOTECA"."PRESTAMO" ("PRESTAMOID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008188
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008188" ON "ADMINPBIBLIOTECA"."ROLES" ("ROLID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008193
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMINPBIBLIOTECA"."SYS_C008193" ON "ADMINPBIBLIOTECA"."USUARIOS" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger AUTORES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."AUTORES_TRG" 
BEFORE INSERT ON AUTORES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.AUTORID IS NULL THEN
      SELECT AUTORES_SEQ.NEXTVAL INTO :NEW.AUTORID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."AUTORES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CREARMULTATRIGGER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."CREARMULTATRIGGER" 
AFTER INSERT OR UPDATE ON PRESTAMO
FOR EACH ROW
DECLARE
    v_fecha_actual DATE := SYSDATE;
    v_monto_multa NUMBER:=1500;
    v_multa_id NUMBER;
BEGIN
    -- Verificar si la fecha de devolución ha pasado
   -- Verificar si la fecha de devolución ha pasado
IF :NEW.FECHADEVOLUCION < v_fecha_actual THEN
    -- Obtener el próximo valor de la secuencia para MULTAID
    SELECT SEQ_MULTA.NEXTVAL INTO v_multa_id FROM DUAL;

    -- Calcular el monto de la multa (ajusta la lógica según tus necesidades)
    v_monto_multa := (:NEW.FECHADEVOLUCION - v_fecha_actual) * 10; -- Ejemplo: 10 unidades por cada día de retraso

    -- Insertar la multa en la tabla MULTA con un valor válido para PRESTAMOID
   INSERT INTO MULTAS(MULTAID, PRESTAMOID, USUARIOCEDULA, MONTO, FECHACREACION, ESTADO)
VALUES (v_multa_id, :NEW.PRESTAMOID, :NEW.USUARIOCEDULA, v_monto_multa, v_fecha_actual, 'PENDIENTE');
-- ...
END IF;

END CrearMultaTrigger;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."CREARMULTATRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger EDITORIALES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."EDITORIALES_TRG" 
BEFORE INSERT ON EDITORIALES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PUBLISHERID IS NULL THEN
      SELECT EDITORIALES_SEQ.NEXTVAL INTO :NEW.PUBLISHERID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."EDITORIALES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger GENEROS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."GENEROS_TRG" 
BEFORE INSERT ON GENEROS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.GENREID IS NULL THEN
      SELECT GENEROS_SEQ.NEXTVAL INTO :NEW.GENREID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."GENEROS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger IDIOMAS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."IDIOMAS_TRG" 
BEFORE INSERT ON IDIOMAS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.LANGUAGEID IS NULL THEN
      SELECT IDIOMAS_SEQ.NEXTVAL INTO :NEW.LANGUAGEID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."IDIOMAS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LIBROS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."LIBROS_TRG" 
BEFORE INSERT ON LIBROS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.BOOKID IS NULL THEN
      SELECT LIBROS_SEQ.NEXTVAL INTO :NEW.BOOKID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."LIBROS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MULTAS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."MULTAS_TRG" 
BEFORE INSERT ON MULTAS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.MULTAID IS NULL THEN
      SELECT MULTAS_SEQ.NEXTVAL INTO :NEW.MULTAID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."MULTAS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRESTAMO_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."PRESTAMO_TRG" 
BEFORE INSERT ON PRESTAMO 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PRESTAMOID IS NULL THEN
      SELECT PRESTAMO_SEQ.NEXTVAL INTO :NEW.PRESTAMOID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."PRESTAMO_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_INSERT_DEVOLUCION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."TRG_AFTER_INSERT_DEVOLUCION" 
AFTER INSERT ON DEVOLUCION
FOR EACH ROW
BEGIN
    -- Eliminar el registro asociado en la tabla PRESTAMO
    DELETE FROM PRESTAMO
    WHERE PRESTAMOID = :NEW.PRESTAMOID;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."TRG_AFTER_INSERT_DEVOLUCION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTORES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."AUTORES_TRG" 
BEFORE INSERT ON AUTORES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.AUTORID IS NULL THEN
      SELECT AUTORES_SEQ.NEXTVAL INTO :NEW.AUTORID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."AUTORES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_INSERT_DEVOLUCION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."TRG_AFTER_INSERT_DEVOLUCION" 
AFTER INSERT ON DEVOLUCION
FOR EACH ROW
BEGIN
    -- Eliminar el registro asociado en la tabla PRESTAMO
    DELETE FROM PRESTAMO
    WHERE PRESTAMOID = :NEW.PRESTAMOID;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."TRG_AFTER_INSERT_DEVOLUCION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger EDITORIALES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."EDITORIALES_TRG" 
BEFORE INSERT ON EDITORIALES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PUBLISHERID IS NULL THEN
      SELECT EDITORIALES_SEQ.NEXTVAL INTO :NEW.PUBLISHERID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."EDITORIALES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger GENEROS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."GENEROS_TRG" 
BEFORE INSERT ON GENEROS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.GENREID IS NULL THEN
      SELECT GENEROS_SEQ.NEXTVAL INTO :NEW.GENREID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."GENEROS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger IDIOMAS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."IDIOMAS_TRG" 
BEFORE INSERT ON IDIOMAS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.LANGUAGEID IS NULL THEN
      SELECT IDIOMAS_SEQ.NEXTVAL INTO :NEW.LANGUAGEID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."IDIOMAS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LIBROS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."LIBROS_TRG" 
BEFORE INSERT ON LIBROS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.BOOKID IS NULL THEN
      SELECT LIBROS_SEQ.NEXTVAL INTO :NEW.BOOKID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."LIBROS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MULTAS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."MULTAS_TRG" 
BEFORE INSERT ON MULTAS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.MULTAID IS NULL THEN
      SELECT MULTAS_SEQ.NEXTVAL INTO :NEW.MULTAID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."MULTAS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRESTAMO_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."PRESTAMO_TRG" 
BEFORE INSERT ON PRESTAMO 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PRESTAMOID IS NULL THEN
      SELECT PRESTAMO_SEQ.NEXTVAL INTO :NEW.PRESTAMOID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."PRESTAMO_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CREARMULTATRIGGER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "ADMINPBIBLIOTECA"."CREARMULTATRIGGER" 
AFTER INSERT OR UPDATE ON PRESTAMO
FOR EACH ROW
DECLARE
    v_fecha_actual DATE := SYSDATE;
    v_monto_multa NUMBER:=1500;
    v_multa_id NUMBER;
BEGIN
    -- Verificar si la fecha de devolución ha pasado
   -- Verificar si la fecha de devolución ha pasado
IF :NEW.FECHADEVOLUCION < v_fecha_actual THEN
    -- Obtener el próximo valor de la secuencia para MULTAID
    SELECT SEQ_MULTA.NEXTVAL INTO v_multa_id FROM DUAL;

    -- Calcular el monto de la multa (ajusta la lógica según tus necesidades)
    v_monto_multa := (:NEW.FECHADEVOLUCION - v_fecha_actual) * 10; -- Ejemplo: 10 unidades por cada día de retraso

    -- Insertar la multa en la tabla MULTA con un valor válido para PRESTAMOID
   INSERT INTO MULTAS(MULTAID, PRESTAMOID, USUARIOCEDULA, MONTO, FECHACREACION, ESTADO)
VALUES (v_multa_id, :NEW.PRESTAMOID, :NEW.USUARIOCEDULA, v_monto_multa, v_fecha_actual, 'PENDIENTE');
-- ...
END IF;

END CrearMultaTrigger;
/
ALTER TRIGGER "ADMINPBIBLIOTECA"."CREARMULTATRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ACTUALIZARLIBRO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."ACTUALIZARLIBRO" (
    p_idLibro IN NUMBER,
    p_titulo IN VARCHAR2,
    p_autorId IN NUMBER,
    p_generoId IN NUMBER,
    p_editorialId IN NUMBER,
    p_idiomaId IN NUMBER,
    p_anioPublicacion IN NUMBER,
    p_isbn IN VARCHAR2,
    p_cantidadCopias IN NUMBER
) AS
BEGIN
    UPDATE Libros
    SET Titulo = p_titulo,
        AutorID = p_autorId,
        GeneroID = p_generoId,
        EditorialID = p_editorialId,
        IdiomaID = p_idiomaId,
        AnioPublicacion = p_anioPublicacion,
        ISBN = p_isbn,
        CantidadCopiasDisponibles = p_cantidadCopias
    WHERE BookID = p_idLibro;

    COMMIT;
END ActualizarLibro;

/
--------------------------------------------------------
--  DDL for Procedure BUSCARAUTORPORID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."BUSCARAUTORPORID" (
    p_AutorId IN NUMBER,
    p_Autor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Autor FOR
        SELECT * FROM Autores WHERE AutorID = p_AutorId;
END BuscarAutorPorId;

/
--------------------------------------------------------
--  DDL for Procedure BUSCARAUTORPORNOMBRE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."BUSCARAUTORPORNOMBRE" (
    p_AutorNombre IN varchar,
    p_Autor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Autor FOR
        SELECT * FROM Autores WHERE NOMBREAUTOR = p_AutorNombre;
END BuscarAutorPorNombre;

/
--------------------------------------------------------
--  DDL for Procedure BUSCAREDITORIALPORID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."BUSCAREDITORIALPORID" (
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Editorial FOR
        SELECT * FROM Editoriales WHERE PublisherID = p_EditorialId;
END BuscarEditorialPorId;

/
--------------------------------------------------------
--  DDL for Procedure BUSCARGENEROPORID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."BUSCARGENEROPORID" (
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_Genero FOR
        SELECT * FROM Generos WHERE GenreID = p_GeneroId;
END BuscarGeneroPorId;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINARLIBROPORID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."ELIMINARLIBROPORID" (p_id IN NUMBER) IS
BEGIN
    DELETE FROM Libros WHERE BookID = p_id;
    COMMIT;
END EliminarLibroPorId;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."ELIMINAR_USUARIO" (p_CEDULA IN NUMBER) AS
BEGIN
    -- Eliminar el usuario con la cédula proporcionada
    DELETE FROM USUARIOS WHERE CEDULA = p_CEDULA;
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Éxito: Usuario eliminado correctamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se encontró un usuario con la cédula proporcionada.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END ELIMINAR_USUARIO;

/
--------------------------------------------------------
--  DDL for Procedure GENERARMULTASAUTOMATICAMENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."GENERARMULTASAUTOMATICAMENTE" AS
   v_fecha_actual DATE := SYSDATE;
   v_monto_multa NUMBER := 1500;
   v_multa_id NUMBER;
BEGIN
   -- Generar multas para préstamos vencidos
   FOR prestamo IN (SELECT * FROM PRESTAMO WHERE FECHADEVOLUCION < v_fecha_actual) LOOP
      BEGIN
         -- Obtener el próximo valor de la secuencia para MULTAID
         SELECT SEQ_MULTA.NEXTVAL INTO v_multa_id FROM DUAL;

         -- Insertar la multa en la tabla MULTA con un valor válido para PRESTAMOID
         INSERT INTO MULTAS(MULTAID, PRESTAMOID, USUARIOCEDULA, MONTO, FECHACREACION, ESTADO)
         VALUES (v_multa_id, prestamo.PRESTAMOID, prestamo.USUARIOCEDULA, v_monto_multa, v_fecha_actual, 'Pendiente');
      EXCEPTION
         WHEN OTHERS THEN
            -- Manejo de excepciones: Imprimir detalles del error
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
            -- Puedes registrar el error en una tabla de registro de errores si es necesario
      END;
   END LOOP;
END GenerarMultasAutomaticamente;

/
--------------------------------------------------------
--  DDL for Procedure INSERTARAUTOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."INSERTARAUTOR" (
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  
) AS
BEGIN
    INSERT INTO AUTORES (
        NOMBREAUTOR,
        APELLIDOAUTOR,
        NACIONALIDADID

    ) VALUES (

        p_NOMBREAUTOR,
        p_APELLIDOAUTOR,
        p_NACIONALIDAD
    );
    COMMIT;
END InsertarAutor;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAREDITORIAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."INSERTAREDITORIAL" (
    P_NOMBREEDITORIAL IN VARCHAR2
) AS
BEGIN
    BEGIN
        INSERT INTO EDITORIALES (NOMBREEDITORIAL) VALUES (P_NOMBREEDITORIAL);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            -- Manejar la excepción de duplicado aquí (puede imprimir un mensaje o registrar).
            -- Puedes decidir si quieres hacer algo específico en caso de duplicado.
            NULL;
        WHEN OTHERS THEN
            -- Manejar otras excepciones aquí.
            RAISE;
    END;
END InsertarEditorial;

/
--------------------------------------------------------
--  DDL for Procedure INSERTARGENERO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."INSERTARGENERO" (
    P_NOMBREGENERO IN VARCHAR2
) AS
BEGIN
    BEGIN
        INSERT INTO GENEROS (NOMBREGENERO) VALUES (P_NOMBREGENERO);
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Error valor duplicado');
            NULL;
        WHEN OTHERS THEN
            -- Manejar otras excepciones aquí.
            RAISE;
    END;
END InsertarGenero;

/
--------------------------------------------------------
--  DDL for Procedure INSERTARLIBRO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."INSERTARLIBRO" (
    p_Titulo IN VARCHAR2,
    p_AutorID IN NUMBER,
    p_GeneroID IN NUMBER,
    p_EditorialID IN NUMBER,
    p_IdiomaID IN NUMBER,
    p_AnioPublicacion IN NUMBER,
    p_ISBN IN VARCHAR2,
    p_CantidadCopias IN NUMBER
) AS
BEGIN
    INSERT INTO Libros (
        Titulo,
        AutorID,
        GeneroID,
        EditorialID,
        IdiomaID,
        AnioPublicacion,
        ISBN,
        CantidadCopiasDisponibles
    ) VALUES (
        p_Titulo,
        p_AutorID,
        p_GeneroID,
        p_EditorialID,
        p_IdiomaID,
        p_AnioPublicacion,
        p_ISBN,
        p_CantidadCopias
    );
    COMMIT;
END InsertarLibro;

/
--------------------------------------------------------
--  DDL for Procedure LLAMAR_INSERTAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."LLAMAR_INSERTAR_USUARIO" (
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER,
    p_RESULTADO OUT VARCHAR2
)
AS
BEGIN
    p_RESULTADO := INSERTAR_USUARIO(p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
    -- No necesitas hacer COMMIT aquí, ya que el COMMIT debería manejarse fuera de esta llamada.
END LLAMAR_INSERTAR_USUARIO;

/
--------------------------------------------------------
--  DDL for Procedure OBTENERAUTORES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENERAUTORES" (p_cursor OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM Autores;
END ObtenerAutores;

/
--------------------------------------------------------
--  DDL for Procedure OBTENEREDITORIALES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENEREDITORIALES" (p_cursor OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN p_cursor FOR
    SELECT PUBLISHERID, NOMBREEDITORIAL
    FROM EDITORIALES; -- Reemplaza con el nombre real de tu tabla de editoriales
END ObtenerEditoriales;

/
--------------------------------------------------------
--  DDL for Procedure OBTENERGENEROS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENERGENEROS" (p_cursor OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM GENEROS;
END ObtenerGeneros;

/
--------------------------------------------------------
--  DDL for Procedure OBTENERIDIOMAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENERIDIOMAS" (p_cursor OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM IDIOMAS;
END ObtenerIdiomas;

/
--------------------------------------------------------
--  DDL for Procedure OBTENERINFORMACIONLIBROS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENERINFORMACIONLIBROS" (p_cursor OUT SYS_REFCURSOR) IS
BEGIN
    OPEN p_cursor FOR
        SELECT L.BookID, L.Titulo, A.NombreAutor AS NombreAutor, G.NombreGenero AS NombreGenero,
               E.NombreEditorial AS NombreEditorial, I.NombreIdioma AS NombreIdioma,
               L.AnioPublicacion, L.ISBN, L.CantidadCopiasDisponibles
          FROM Libros L
               INNER JOIN Autores A ON L.AutorID = A.AutorID
               INNER JOIN Generos G ON L.GeneroID = G.GenreID
               INNER JOIN Editoriales E ON L.EditorialID = E.PublisherID
               INNER JOIN Idiomas I ON L.IdiomaID = I.LanguageID;
END ObtenerInformacionLibros;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_INFO_ROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENER_INFO_ROLES" (p_cursor OUT SYS_REFCURSOR) IS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM vista_roles;
END obtener_info_roles;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_INFO_USUARIOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENER_INFO_USUARIOS" (
    p_resultado OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_resultado FOR
    SELECT U.CEDULA, U.NOMBRE, U.APELLIDO, U.EMAIL, R.NOMBRE_ROL AS ROL
    FROM USUARIOS U
    JOIN ROLES R ON U.ROLID = R.ROLID;
END;

/
--------------------------------------------------------
--  DDL for Procedure OBTENERLIBROPORTITULO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENERLIBROPORTITULO" (p_titulo IN VARCHAR2, p_cursor OUT SYS_REFCURSOR) IS
BEGIN
    OPEN p_cursor FOR
        SELECT L.BOOKID as bookID, L.Titulo as  titulo, A.NombreAutor AS NombreAutor, G.NombreGenero AS NombreGenero,
               E.NombreEditorial AS NombreEditorial, I.NombreIdioma AS NombreIdioma , L.ISBN as ISBN, L.CantidadCopiasDisponibles as cantidadCopiasDisponibles
          FROM Libros L
               INNER JOIN Autores A ON L.AutorID = A.AutorID
               INNER JOIN Generos G ON L.GeneroID = G.GenreID
               INNER JOIN Editoriales E ON L.EditorialID = E.PublisherID
               INNER JOIN Idiomas I ON L.IdiomaID = I.LanguageID
          WHERE L.Titulo = p_titulo;
END ObtenerLibroPorTitulo;

/
--------------------------------------------------------
--  DDL for Procedure OBTENERNACIONALIDADES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."OBTENERNACIONALIDADES" (p_cursor OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM NACIONALIDADES;
END ObtenerNacionalidades;

/
--------------------------------------------------------
--  DDL for Procedure REALIZAR_PRESTAMO_LIBRO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ADMINPBIBLIOTECA"."REALIZAR_PRESTAMO_LIBRO" (
    p_CEDULA IN NUMBER,
    p_BOOKID IN NUMBER,
    p_FECHA_INICIO IN VARCHAR2,
    p_FECHA_DEVOLUCION_PREVISTA IN VARCHAR2,
    p_ESTADO_PRESTAMO IN VARCHAR2
) AS

BEGIN

    INSERT INTO PRESTAMOS (CEDULA, BOOKID, FECHAINICIO, FECHADEVOLUCIONPREVISTA, ESTADO_PRESTAMO)
    VALUES (p_CEDULA, p_BOOKID, p_FECHA_INICIO, p_FECHA_DEVOLUCION_PREVISTA, p_ESTADO_PRESTAMO);

    COMMIT;



       
END REALIZAR_PRESTAMO_LIBRO;

/
--------------------------------------------------------
--  DDL for Package AUTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."AUTOR" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerAutores(p_cursor OUT CURSOR_TYPE);
   PROCEDURE InsertarAutor(
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  );
  PROCEDURE EliminarAutorPorId(p_id IN NUMBER);
  PROCEDURE BuscarAutorPorNombre(p_AutorNombre IN VARCHAR, p_Autor OUT CURSOR_TYPE);
  PROCEDURE BuscarAutorPorId(p_AutorId IN NUMBER, p_Autor OUT CURSOR_TYPE);
   PROCEDURE ActualizarAutor(
    p_autorId IN NUMBER,
    p_nombreAutor IN VARCHAR2,
    p_apellidoAutor IN VARCHAR2,
    p_nacionalidadID IN NUMBER

  );
END Autor;

/
--------------------------------------------------------
--  DDL for Package EDITORIAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."EDITORIAL" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerEditoriales(p_cursor OUT CURSOR_TYPE);
  PROCEDURE InsertarEditorial(P_NOMBREEDITORIAL IN VARCHAR2);
  PROCEDURE EliminarEditorialPorId(p_id IN NUMBER);
  PROCEDURE BuscarEditorialPorId(
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
  );
  PROCEDURE ActualizarEditorial(
    p_publisherId IN NUMBER,
    p_nombreEditorial IN VARCHAR2
  );

END Editorial;

/
--------------------------------------------------------
--  DDL for Package GENERO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."GENERO" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerGeneros(p_cursor OUT CURSOR_TYPE);
  PROCEDURE InsertarGenero(P_NOMBREGENERO IN VARCHAR2);
  PROCEDURE EliminarGeneroPorId(p_id IN NUMBER);
  PROCEDURE BuscarGeneroPorId(
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
  );
  PROCEDURE ActualizarGenero(
    p_GENREID IN NUMBER,
    p_NOMBREGENERO IN VARCHAR2
  );

END Genero;

/
--------------------------------------------------------
--  DDL for Package LIBRO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."LIBRO" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerNacionalidades(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerLibroPorTitulo(p_titulo IN VARCHAR2, p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerLibroIdPorTitulo(p_titulo IN VARCHAR2, p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerInformacionLibros(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerIdiomas(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerGeneros(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerEditoriales(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerAutores(p_cursor OUT CURSOR_TYPE);
  PROCEDURE InsertarLibro(
    p_Titulo IN VARCHAR2,
    p_AutorID IN NUMBER,
    p_GeneroID IN NUMBER,
    p_EditorialID IN NUMBER,
    p_IdiomaID IN NUMBER,
    p_AnioPublicacion IN NUMBER,
    p_ISBN IN VARCHAR2,
    p_CantidadCopias IN NUMBER
  );
  PROCEDURE InsertarGenero(P_NOMBREGENERO IN VARCHAR2);
  PROCEDURE InsertarEditorial(P_NOMBREEDITORIAL IN VARCHAR2);
  PROCEDURE InsertarAutor(
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  );
  PROCEDURE EliminarLibroPorId(p_id IN NUMBER);
  PROCEDURE EliminarAutorPorId(p_id IN NUMBER);
  PROCEDURE EliminarGeneroPorId(p_id IN NUMBER);
  PROCEDURE EliminarEditorialPorId(p_id IN NUMBER);
  PROCEDURE BuscarGeneroPorId(
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
  );

  PROCEDURE BuscarEditorialPorId(
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
  );
  PROCEDURE BuscarAutorPorNombre(p_AutorNombre IN VARCHAR, p_Autor OUT CURSOR_TYPE);
  PROCEDURE BuscarAutorPorId(p_AutorId IN NUMBER, p_Autor OUT CURSOR_TYPE);
  PROCEDURE ActualizarLibro(
    p_idLibro IN NUMBER,
    p_titulo IN VARCHAR2,
    p_autorId IN NUMBER,
    p_generoId IN NUMBER,
    p_editorialId IN NUMBER,
    p_idiomaId IN NUMBER,
    p_anioPublicacion IN NUMBER,
    p_isbn IN VARCHAR2,
    p_cantidadCopias IN NUMBER
  );
  
  
  PROCEDURE ActualizarAutor(
    p_autorId IN NUMBER,
    p_nombreAutor IN VARCHAR2,
    p_apellidoAutor IN VARCHAR2,
    p_nacionalidadID IN NUMBER

  );
  
   PROCEDURE ActualizarEditorial(
    p_publisherId IN NUMBER,
    p_nombreEditorial IN VARCHAR2

  );
  
  
   PROCEDURE ActualizarGenero(
    p_GENREID IN NUMBER,
    p_NOMBREGENERO IN VARCHAR2

  );
  
  
  
  
  
  
END Libro;

/
--------------------------------------------------------
--  DDL for Package LOGIN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."LOGIN" AS
  FUNCTION UsuarioFunction(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2
  ) RETURN BOOLEAN;

  PROCEDURE IniciarSesionYObtenerUsuario(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2,
    p_result OUT NUMBER
  );

  PROCEDURE ObtenerDatosUsuario(
    p_cedula IN NUMBER,
    p_roles OUT SYS_REFCURSOR
  );
END Login;

/
--------------------------------------------------------
--  DDL for Package MULTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."MULTA" AS 

 PROCEDURE obtener_informacion_multas(p_resultado OUT SYS_REFCURSOR);

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END MULTA;

/
--------------------------------------------------------
--  DDL for Package PRESTAMOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."PRESTAMOS" AS
  -- Otras declaraciones de paquete si las tienes
  
   
  FUNCTION VerificarMultas(p_usuario_cedula IN NUMBER) RETURN BOOLEAN;
  PROCEDURE CrearPrestamo(
    p_fecha_prestamo IN DATE,
    p_fecha_devolucion IN DATE,
    p_usuario_cedula IN NUMBER,
    p_libro_id IN NUMBER,
    p_resultado OUT NUMBER
  );
  PROCEDURE ObtenerPrestamos(p_Prestamos OUT SYS_REFCURSOR);


END Prestamos;

/
--------------------------------------------------------
--  DDL for Package USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."USUARIO" AS
      -- Definición de tipos de cursores (si es necesario)
      TYPE CURSOR_TYPE IS REF CURSOR;
    
      -- Procedimiento para obtener información de usuarios
      PROCEDURE OBTENER_INFO_USUARIOS (
        p_resultado OUT CURSOR_TYPE
      );
    
      -- Procedimiento para obtener información de roles
      PROCEDURE OBTENER_INFO_ROLES (
        p_cursor OUT CURSOR_TYPE
      );
    
      PROCEDURE ELIMINAR_USUARIO(
        p_CEDULA IN NUMBER
      );
      
      FUNCTION VerificarExistenciaCedula(p_usuario_cedula IN NUMBER) RETURN BOOLEAN;
    
      -- Procedimiento para llamar a INSERTAR_USUARIO
      PROCEDURE LLAMAR_INSERTAR_USUARIO(
        p_NOMBRE IN VARCHAR2,
        p_APELLIDO IN VARCHAR2,
        p_EMAIL IN VARCHAR2,
        p_CONTRASENA IN VARCHAR2,
        p_ROLID IN NUMBER,
        p_CEDULA IN NUMBER,
        p_RESULTADO OUT VARCHAR2
      );
    
      -- Función para insertar usuario
      FUNCTION INSERTAR_USUARIO(
        p_NOMBRE IN VARCHAR2,
        p_APELLIDO IN VARCHAR2,
        p_EMAIL IN VARCHAR2,
        p_CONTRASENA IN VARCHAR2,
        p_ROLID IN NUMBER,
        p_CEDULA IN NUMBER
      ) RETURN VARCHAR2;
      
      
      
      FUNCTION UsuarioFunction(
            p_cedula IN NUMBER,
            p_contrasena IN VARCHAR2
        ) RETURN BOOLEAN;
    
       PROCEDURE IniciarSesionYObtenerUsuario(
            p_cedula IN NUMBER,
            p_contrasena IN VARCHAR2,
            p_result OUT NUMBER
        );
        
      PROCEDURE ObtenerDatosUsuario(
          p_cedula IN NUMBER,
          p_roles OUT SYS_REFCURSOR
       );
        
      
      
    END Usuario;

/
--------------------------------------------------------
--  DDL for Package PRESTAMOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."PRESTAMOS" AS
  -- Otras declaraciones de paquete si las tienes
  
   
  FUNCTION VerificarMultas(p_usuario_cedula IN NUMBER) RETURN BOOLEAN;
  PROCEDURE CrearPrestamo(
    p_fecha_prestamo IN DATE,
    p_fecha_devolucion IN DATE,
    p_usuario_cedula IN NUMBER,
    p_libro_id IN NUMBER,
    p_resultado OUT NUMBER
  );
  PROCEDURE ObtenerPrestamos(p_Prestamos OUT SYS_REFCURSOR);


END Prestamos;

/
--------------------------------------------------------
--  DDL for Package AUTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."AUTOR" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerAutores(p_cursor OUT CURSOR_TYPE);
   PROCEDURE InsertarAutor(
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  );
  PROCEDURE EliminarAutorPorId(p_id IN NUMBER);
  PROCEDURE BuscarAutorPorNombre(p_AutorNombre IN VARCHAR, p_Autor OUT CURSOR_TYPE);
  PROCEDURE BuscarAutorPorId(p_AutorId IN NUMBER, p_Autor OUT CURSOR_TYPE);
   PROCEDURE ActualizarAutor(
    p_autorId IN NUMBER,
    p_nombreAutor IN VARCHAR2,
    p_apellidoAutor IN VARCHAR2,
    p_nacionalidadID IN NUMBER

  );
END Autor;

/
--------------------------------------------------------
--  DDL for Package EDITORIAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."EDITORIAL" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerEditoriales(p_cursor OUT CURSOR_TYPE);
  PROCEDURE InsertarEditorial(P_NOMBREEDITORIAL IN VARCHAR2);
  PROCEDURE EliminarEditorialPorId(p_id IN NUMBER);
  PROCEDURE BuscarEditorialPorId(
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
  );
  PROCEDURE ActualizarEditorial(
    p_publisherId IN NUMBER,
    p_nombreEditorial IN VARCHAR2
  );

END Editorial;

/
--------------------------------------------------------
--  DDL for Package GENERO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."GENERO" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerGeneros(p_cursor OUT CURSOR_TYPE);
  PROCEDURE InsertarGenero(P_NOMBREGENERO IN VARCHAR2);
  PROCEDURE EliminarGeneroPorId(p_id IN NUMBER);
  PROCEDURE BuscarGeneroPorId(
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
  );
  PROCEDURE ActualizarGenero(
    p_GENREID IN NUMBER,
    p_NOMBREGENERO IN VARCHAR2
  );

END Genero;

/
--------------------------------------------------------
--  DDL for Package LIBRO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."LIBRO" AS
  TYPE CURSOR_TYPE IS REF CURSOR;

  PROCEDURE ObtenerNacionalidades(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerLibroPorTitulo(p_titulo IN VARCHAR2, p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerLibroIdPorTitulo(p_titulo IN VARCHAR2, p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerInformacionLibros(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerIdiomas(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerGeneros(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerEditoriales(p_cursor OUT CURSOR_TYPE);
  PROCEDURE ObtenerAutores(p_cursor OUT CURSOR_TYPE);
  PROCEDURE InsertarLibro(
    p_Titulo IN VARCHAR2,
    p_AutorID IN NUMBER,
    p_GeneroID IN NUMBER,
    p_EditorialID IN NUMBER,
    p_IdiomaID IN NUMBER,
    p_AnioPublicacion IN NUMBER,
    p_ISBN IN VARCHAR2,
    p_CantidadCopias IN NUMBER
  );
  PROCEDURE InsertarGenero(P_NOMBREGENERO IN VARCHAR2);
  PROCEDURE InsertarEditorial(P_NOMBREEDITORIAL IN VARCHAR2);
  PROCEDURE InsertarAutor(
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  );
  PROCEDURE EliminarLibroPorId(p_id IN NUMBER);
  PROCEDURE EliminarAutorPorId(p_id IN NUMBER);
  PROCEDURE EliminarGeneroPorId(p_id IN NUMBER);
  PROCEDURE EliminarEditorialPorId(p_id IN NUMBER);
  PROCEDURE BuscarGeneroPorId(
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
  );

  PROCEDURE BuscarEditorialPorId(
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
  );
  PROCEDURE BuscarAutorPorNombre(p_AutorNombre IN VARCHAR, p_Autor OUT CURSOR_TYPE);
  PROCEDURE BuscarAutorPorId(p_AutorId IN NUMBER, p_Autor OUT CURSOR_TYPE);
  PROCEDURE ActualizarLibro(
    p_idLibro IN NUMBER,
    p_titulo IN VARCHAR2,
    p_autorId IN NUMBER,
    p_generoId IN NUMBER,
    p_editorialId IN NUMBER,
    p_idiomaId IN NUMBER,
    p_anioPublicacion IN NUMBER,
    p_isbn IN VARCHAR2,
    p_cantidadCopias IN NUMBER
  );
  
  
  PROCEDURE ActualizarAutor(
    p_autorId IN NUMBER,
    p_nombreAutor IN VARCHAR2,
    p_apellidoAutor IN VARCHAR2,
    p_nacionalidadID IN NUMBER

  );
  
   PROCEDURE ActualizarEditorial(
    p_publisherId IN NUMBER,
    p_nombreEditorial IN VARCHAR2

  );
  
  
   PROCEDURE ActualizarGenero(
    p_GENREID IN NUMBER,
    p_NOMBREGENERO IN VARCHAR2

  );
  
  
  
  
  
  
END Libro;

/
--------------------------------------------------------
--  DDL for Package LOGIN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."LOGIN" AS
  FUNCTION UsuarioFunction(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2
  ) RETURN BOOLEAN;

  PROCEDURE IniciarSesionYObtenerUsuario(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2,
    p_result OUT NUMBER
  );

  PROCEDURE ObtenerDatosUsuario(
    p_cedula IN NUMBER,
    p_roles OUT SYS_REFCURSOR
  );
END Login;

/
--------------------------------------------------------
--  DDL for Package MULTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."MULTA" AS 

 PROCEDURE obtener_informacion_multas(p_resultado OUT SYS_REFCURSOR);

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

END MULTA;

/
--------------------------------------------------------
--  DDL for Package USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "ADMINPBIBLIOTECA"."USUARIO" AS
      -- Definición de tipos de cursores (si es necesario)
      TYPE CURSOR_TYPE IS REF CURSOR;
    
      -- Procedimiento para obtener información de usuarios
      PROCEDURE OBTENER_INFO_USUARIOS (
        p_resultado OUT CURSOR_TYPE
      );
    
      -- Procedimiento para obtener información de roles
      PROCEDURE OBTENER_INFO_ROLES (
        p_cursor OUT CURSOR_TYPE
      );
    
      PROCEDURE ELIMINAR_USUARIO(
        p_CEDULA IN NUMBER
      );
      
      FUNCTION VerificarExistenciaCedula(p_usuario_cedula IN NUMBER) RETURN BOOLEAN;
    
      -- Procedimiento para llamar a INSERTAR_USUARIO
      PROCEDURE LLAMAR_INSERTAR_USUARIO(
        p_NOMBRE IN VARCHAR2,
        p_APELLIDO IN VARCHAR2,
        p_EMAIL IN VARCHAR2,
        p_CONTRASENA IN VARCHAR2,
        p_ROLID IN NUMBER,
        p_CEDULA IN NUMBER,
        p_RESULTADO OUT VARCHAR2
      );
    
      -- Función para insertar usuario
      FUNCTION INSERTAR_USUARIO(
        p_NOMBRE IN VARCHAR2,
        p_APELLIDO IN VARCHAR2,
        p_EMAIL IN VARCHAR2,
        p_CONTRASENA IN VARCHAR2,
        p_ROLID IN NUMBER,
        p_CEDULA IN NUMBER
      ) RETURN VARCHAR2;
      
      
      
      FUNCTION UsuarioFunction(
            p_cedula IN NUMBER,
            p_contrasena IN VARCHAR2
        ) RETURN BOOLEAN;
    
       PROCEDURE IniciarSesionYObtenerUsuario(
            p_cedula IN NUMBER,
            p_contrasena IN VARCHAR2,
            p_result OUT NUMBER
        );
        
      PROCEDURE ObtenerDatosUsuario(
          p_cedula IN NUMBER,
          p_roles OUT SYS_REFCURSOR
       );
        
      
      
    END Usuario;

/
--------------------------------------------------------
--  DDL for Package Body AUTOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."AUTOR" AS

  PROCEDURE ObtenerAutores(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM Autores;
  END ObtenerAutores;

  PROCEDURE InsertarAutor(
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  ) IS
  BEGIN
    INSERT INTO Autores (NOMBREAUTOR, APELLIDOAUTOR, NACIONALIDADID)
    VALUES (p_NOMBREAUTOR, p_APELLIDOAUTOR, p_NACIONALIDAD);
    COMMIT;
  END InsertarAutor;

 PROCEDURE EliminarAutorPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM AUTORES WHERE AUTORID = p_id;
    COMMIT;
  END EliminarAutorPorId;

 PROCEDURE BuscarAutorPorNombre(
    p_AutorNombre IN VARCHAR,
    p_Autor OUT CURSOR_TYPE
  ) IS
  BEGIN
    OPEN p_Autor FOR
      SELECT * FROM Autores WHERE NOMBREAUTOR = p_AutorNombre;
  END BuscarAutorPorNombre;

 PROCEDURE BuscarAutorPorId(
    p_AutorId IN NUMBER,
    p_Autor OUT CURSOR_TYPE
  ) IS
BEGIN
  OPEN p_Autor FOR
    SELECT A.AutorID, A.NombreAutor, A.ApellidoAutor, N.NombreNacionalidad, N.nacionalidadid
    FROM Autores A
    INNER JOIN Nacionalidades N ON A.NacionalidadID = N.NacionalidadID
    WHERE A.AutorID = p_AutorId;
END BuscarAutorPorId;


   PROCEDURE ActualizarAutor(
     p_autorId IN NUMBER,
    p_nombreAutor IN VARCHAR2,
    p_apellidoAutor IN VARCHAR2,
    p_nacionalidadID IN NUMBER
  ) IS
  BEGIN
    UPDATE autores
    SET AUTORID = p_autorId,
        NOMBREAUTOR = p_nombreAutor,
        APELLIDOAUTOR = p_apellidoAutor,
        NACIONALIDADID = p_nacionalidadID

    WHERE AUTORID = p_autorId;

    COMMIT;
  END ActualizarAutor;
END Autor;


/
--------------------------------------------------------
--  DDL for Package Body EDITORIAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."EDITORIAL" AS
  

  PROCEDURE ObtenerEditoriales(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM Editoriales;
  END ObtenerEditoriales;

  PROCEDURE InsertarEditorial(P_NOMBREEDITORIAL IN VARCHAR2) IS
  BEGIN
    INSERT INTO Editoriales (NombreEditorial) VALUES (P_NOMBREEDITORIAL);
    COMMIT;
  END InsertarEditorial;

  PROCEDURE EliminarEditorialPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM Editoriales WHERE PublisherID = p_id;
    COMMIT;
  END EliminarEditorialPorId;

  PROCEDURE BuscarEditorialPorId(
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
  ) IS
  BEGIN
    OPEN p_Editorial FOR
      SELECT * FROM Editoriales WHERE PublisherID = p_EditorialId;
  END BuscarEditorialPorId;

  PROCEDURE ActualizarEditorial(
    p_publisherId IN NUMBER,
    p_nombreEditorial IN VARCHAR2
  ) IS
  BEGIN
    UPDATE Editoriales
    SET
      NombreEditorial = p_nombreEditorial
    WHERE
      PublisherID = p_publisherId;
    COMMIT;
  END ActualizarEditorial;

END Editorial;

/
--------------------------------------------------------
--  DDL for Package Body GENERO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."GENERO" AS
  PROCEDURE ObtenerGeneros(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM Generos;
  END ObtenerGeneros;

  PROCEDURE InsertarGenero(P_NOMBREGENERO IN VARCHAR2) IS
  BEGIN
    INSERT INTO Generos (NombreGenero) VALUES (P_NOMBREGENERO);
    COMMIT;
  END InsertarGenero;

  PROCEDURE EliminarGeneroPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM Generos WHERE GenreID = p_id;
    COMMIT;
  END EliminarGeneroPorId;

  PROCEDURE BuscarGeneroPorId(
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
  ) IS
  BEGIN
    OPEN p_Genero FOR
      SELECT * FROM Generos WHERE GenreID = p_GeneroId;
  END BuscarGeneroPorId;

  PROCEDURE ActualizarGenero(
    p_GENREID IN NUMBER,
    p_NOMBREGENERO IN VARCHAR2
  ) IS
  BEGIN
    UPDATE Generos SET NombreGenero = p_NOMBREGENERO WHERE GenreID = p_GENREID;
    COMMIT;
  END ActualizarGenero;

END Genero;

/
--------------------------------------------------------
--  DDL for Package Body LIBRO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."LIBRO" AS


  PROCEDURE ObtenerNacionalidades(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM NACIONALIDADES;
  END ObtenerNacionalidades;

  PROCEDURE ObtenerLibroPorTitulo(p_titulo IN VARCHAR2, p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT L.BookID, L.Titulo, A.NombreAutor AS NombreAutor, G.NombreGenero AS NombreGenero,
               E.NombreEditorial AS NombreEditorial, I.NombreIdioma AS NombreIdioma,
               L.AnioPublicacion, L.ISBN, L.CantidadCopiasDisponibles
          FROM Libros L
               INNER JOIN Autores A ON L.AutorID = A.AutorID
               INNER JOIN Generos G ON L.GeneroID = G.GenreID
               INNER JOIN Editoriales E ON L.EditorialID = E.PublisherID
               INNER JOIN Idiomas I ON L.IdiomaID = I.LanguageID

      WHERE
        L.Titulo = p_titulo;
  END ObtenerLibroPorTitulo;




  PROCEDURE ObtenerLibroIdPorTitulo(p_titulo IN VARCHAR2, p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT
        BOOKID AS bookID,
        Titulo AS titulo,
        AUTORID AS NombreAutor,
        GENEROID AS NombreGenero,
        EDITORIALID AS NombreEditorial,
        IDIOMAID AS NombreIdioma,
        ISBN AS ISBN,
        CantidadCopiasDisponibles AS cantidadCopiasDisponibles
      FROM
        Libros L


      WHERE
        Titulo = p_titulo;
  END ObtenerLibroIdPorTitulo;






  PROCEDURE ObtenerInformacionLibros(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT
        L.BookID,
        L.Titulo,
        A.NombreAutor AS NombreAutor,
        G.NombreGenero AS NombreGenero,
        E.NombreEditorial AS NombreEditorial,
        I.NombreIdioma AS NombreIdioma,
        L.AnioPublicacion,
        L.ISBN,
        L.CantidadCopiasDisponibles
      FROM
        Libros L
        INNER JOIN Autores A ON L.AutorID = A.AutorID
        INNER JOIN Generos G ON L.GeneroID = G.GenreID
        INNER JOIN Editoriales E ON L.EditorialID = E.PublisherID
        INNER JOIN Idiomas I ON L.IdiomaID = I.LanguageID;
  END ObtenerInformacionLibros;


PROCEDURE BuscarGeneroPorId(
    p_GeneroId IN NUMBER,
    p_Genero OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN p_Genero FOR
      SELECT * FROM Generos WHERE GenreID = p_GeneroId;
  END BuscarGeneroPorId;

  PROCEDURE BuscarEditorialPorId(
    p_EditorialId IN NUMBER,
    p_Editorial OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN p_Editorial FOR
      SELECT * FROM Editoriales WHERE PublisherID = p_EditorialId;
  END BuscarEditorialPorId;




  PROCEDURE ObtenerIdiomas(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM IDIOMAS;
  END ObtenerIdiomas;

  PROCEDURE ObtenerGeneros(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM GENEROS;
  END ObtenerGeneros;

  PROCEDURE ObtenerEditoriales(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT PUBLISHERID, NOMBREEDITORIAL
      FROM EDITORIALES;
  END ObtenerEditoriales;

  PROCEDURE ObtenerAutores(p_cursor OUT CURSOR_TYPE) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT * FROM Autores;
  END ObtenerAutores;

  PROCEDURE InsertarLibro(
    p_Titulo IN VARCHAR2,
    p_AutorID IN NUMBER,
    p_GeneroID IN NUMBER,
    p_EditorialID IN NUMBER,
    p_IdiomaID IN NUMBER,
    p_AnioPublicacion IN NUMBER,
    p_ISBN IN VARCHAR2,
    p_CantidadCopias IN NUMBER
  ) IS
  BEGIN
    INSERT INTO Libros (
      Titulo,
      AutorID,
      GeneroID,
      EditorialID,
      IdiomaID,
      AnioPublicacion,
      ISBN,
      CantidadCopiasDisponibles
    ) VALUES (
      p_Titulo,
      p_AutorID,
      p_GeneroID,
      p_EditorialID,
      p_IdiomaID,
      p_AnioPublicacion,
      p_ISBN,
      p_CantidadCopias
    );
    COMMIT;
  END InsertarLibro;

  PROCEDURE InsertarGenero(P_NOMBREGENERO IN VARCHAR2) IS
  BEGIN
    BEGIN
      INSERT INTO GENEROS (NOMBREGENERO) VALUES (P_NOMBREGENERO);
      COMMIT;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error valor duplicado');
        NULL;
      WHEN OTHERS THEN
        RAISE;
    END;
  END InsertarGenero;

  PROCEDURE InsertarEditorial(P_NOMBREEDITORIAL IN VARCHAR2) IS
  BEGIN
    BEGIN
      INSERT INTO EDITORIALES (NOMBREEDITORIAL) VALUES (P_NOMBREEDITORIAL);
      COMMIT;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        NULL;
      WHEN OTHERS THEN
        RAISE;
    END;
  END InsertarEditorial;

  PROCEDURE InsertarAutor(
    p_NOMBREAUTOR IN VARCHAR2,
    p_APELLIDOAUTOR IN VARCHAR2,
    p_NACIONALIDAD IN NUMBER
  ) IS
  BEGIN
    INSERT INTO AUTORES (
      NOMBREAUTOR,
      APELLIDOAUTOR,
      NACIONALIDADID
    ) VALUES (
      p_NOMBREAUTOR,
      p_APELLIDOAUTOR,
      p_NACIONALIDAD
    );
    COMMIT;
  END InsertarAutor;

  PROCEDURE EliminarLibroPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM Libros WHERE BookID = p_id;
    COMMIT;
  END EliminarLibroPorId;

    PROCEDURE EliminarAutorPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM AUTORES WHERE AUTORID = p_id;
    COMMIT;
  END EliminarAutorPorId;


    PROCEDURE EliminarGeneroPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM GENEROS WHERE GENREID = p_id;
    COMMIT;
  END EliminarGeneroPorId;

    PROCEDURE EliminarEditorialPorId(p_id IN NUMBER) IS
  BEGIN
    DELETE FROM EDITORIALES WHERE PUBLISHERID = p_id;
    COMMIT;
  END EliminarEditorialPorId;




  PROCEDURE BuscarAutorPorNombre(
    p_AutorNombre IN VARCHAR,
    p_Autor OUT CURSOR_TYPE
  ) IS
  BEGIN
    OPEN p_Autor FOR
      SELECT * FROM Autores WHERE NOMBREAUTOR = p_AutorNombre;
  END BuscarAutorPorNombre;

 PROCEDURE BuscarAutorPorId(
    p_AutorId IN NUMBER,
    p_Autor OUT CURSOR_TYPE
  ) IS
BEGIN
  OPEN p_Autor FOR
    SELECT A.AutorID, A.NombreAutor, A.ApellidoAutor, N.NombreNacionalidad, N.nacionalidadid
    FROM Autores A
    INNER JOIN Nacionalidades N ON A.NacionalidadID = N.NacionalidadID
    WHERE A.AutorID = p_AutorId;
END BuscarAutorPorId;


  PROCEDURE ActualizarLibro(
    p_idLibro IN NUMBER,
    p_titulo IN VARCHAR2,
    p_autorId IN NUMBER,
    p_generoId IN NUMBER,
    p_editorialId IN NUMBER,
    p_idiomaId IN NUMBER,
    p_anioPublicacion IN NUMBER,
    p_isbn IN VARCHAR2,
    p_cantidadCopias IN NUMBER
  ) IS
  BEGIN
    UPDATE Libros
    SET Titulo = p_titulo,
        AutorID = p_autorId,
        GeneroID = p_generoId,
        EditorialID = p_editorialId,
        IdiomaID = p_idiomaId,
        AnioPublicacion = p_anioPublicacion,
        ISBN = p_isbn,
        CantidadCopiasDisponibles = p_cantidadCopias
    WHERE BookID = p_idLibro;

    COMMIT;
  END ActualizarLibro;





  PROCEDURE ActualizarAutor(
     p_autorId IN NUMBER,
    p_nombreAutor IN VARCHAR2,
    p_apellidoAutor IN VARCHAR2,
    p_nacionalidadID IN NUMBER
  ) IS
  BEGIN
    UPDATE autores
    SET AUTORID = p_autorId,
        NOMBREAUTOR = p_nombreAutor,
        APELLIDOAUTOR = p_apellidoAutor,
        NACIONALIDADID = p_nacionalidadID

    WHERE AUTORID = p_autorId;

    COMMIT;
  END ActualizarAutor;


  PROCEDURE ActualizarEditorial(
    p_publisherId IN NUMBER,
    p_nombreEditorial IN VARCHAR2
  ) IS
  BEGIN
    UPDATE Editoriales
    SET
      NombreEditorial = p_nombreEditorial
    WHERE
      PublisherID = p_publisherId;
    COMMIT;
  END ActualizarEditorial;

  PROCEDURE ActualizarGenero(
    p_GENREID IN NUMBER,
    p_NOMBREGENERO IN VARCHAR2
  ) IS
  BEGIN
    UPDATE Generos
    SET
      NombreGenero = p_NOMBREGENERO
    WHERE
      GENREID = p_GENREID;
    COMMIT;
  END ActualizarGenero;





END Libro;

/
--------------------------------------------------------
--  DDL for Package Body LOGIN
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."LOGIN" AS
  FUNCTION UsuarioFunction(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2
  ) RETURN BOOLEAN IS
    v_usuario_encontrado NUMBER := 0;
  BEGIN
    SELECT COUNT(*)
    INTO v_usuario_encontrado
    FROM usuarios
    WHERE CEDULA = p_cedula AND CONTRASENA = p_contrasena;

    RETURN v_usuario_encontrado = 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN FALSE;
    WHEN OTHERS THEN
      RAISE;
  END UsuarioFunction;

  PROCEDURE IniciarSesionYObtenerUsuario(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2,
    p_result OUT NUMBER
  ) IS
  BEGIN
    p_result := CASE WHEN UsuarioFunction(p_cedula, p_contrasena) THEN 1 ELSE 0 END;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE;
  END IniciarSesionYObtenerUsuario;

  PROCEDURE ObtenerDatosUsuario(
    p_cedula IN NUMBER,
    p_roles OUT SYS_REFCURSOR
  ) IS
  BEGIN
    OPEN p_roles FOR
      SELECT U.CEDULA, U.NOMBRE, U.APELLIDO, U.EMAIL, U.CONTRASENA, R.NOMBRE_ROL AS ROL_NOMBRE
      FROM usuarios U
      JOIN roles R ON U.ROLID = R.ROLID
      WHERE U.CEDULA = p_cedula;
  END ObtenerDatosUsuario;

END Login;

/
--------------------------------------------------------
--  DDL for Package Body MI_PAQUETE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."MI_PAQUETE" AS
  -- Implementación de OBTENER_INFO_USUARIOS
  PROCEDURE OBTENER_INFO_USUARIOS (
    p_resultado OUT CURSOR_TYPE
  ) IS
  BEGIN
    OPEN p_resultado FOR
    SELECT U.CEDULA, U.NOMBRE, U.APELLIDO, U.EMAIL, R.NOMBRE_ROL AS ROL
    FROM USUARIOS U
    JOIN ROLES R ON U.ROLID = R.ROLID;
  END OBTENER_INFO_USUARIOS;

  -- Implementación de OBTENER_INFO_ROLES
  PROCEDURE OBTENER_INFO_ROLES (
    p_cursor OUT CURSOR_TYPE
  ) IS
  BEGIN
    OPEN p_cursor FOR
    SELECT * FROM vista_roles;
  END OBTENER_INFO_ROLES;

  -- Implementación de LLAMAR_INSERTAR_USUARIO
  PROCEDURE LLAMAR_INSERTAR_USUARIO(
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER,
    p_RESULTADO OUT VARCHAR2
  ) IS
  BEGIN
    p_RESULTADO := INSERTAR_USUARIO(p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
    -- No necesitas hacer COMMIT aquí, ya que el COMMIT debería manejarse fuera de esta llamada.
  END LLAMAR_INSERTAR_USUARIO;

  -- Implementación de INSERTAR_USUARIO
  FUNCTION INSERTAR_USUARIO(
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER
  ) RETURN VARCHAR2 IS
    v_EXISTE NUMBER;
  BEGIN
    -- Verificar si ya existe un usuario con la misma cédula
    SELECT COUNT(*)
    INTO v_EXISTE
    FROM USUARIOS
    WHERE CEDULA = p_CEDULA;

    IF v_EXISTE = 0 THEN
      -- No existe, procedemos con la inserción
      INSERT INTO USUARIOS (NOMBRE, APELLIDO, EMAIL, CONTRASENA, ROLID, CEDULA)
      VALUES (p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
      COMMIT;

      -- Indicar que la operación fue exitosa
      RETURN 'Éxito: Usuario insertado correctamente.';
    ELSE
      -- Ya existe un usuario con la misma cédula
      -- Indicar que la operación falló y proporcionar un mensaje de error
      RETURN 'Error: Ya existe un usuario con la misma cédula.';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      -- Manejar otras excepciones aquí
      RETURN 'Error: Se produjo una excepción al insertar el usuario.';
  END INSERTAR_USUARIO;
END usuario;

/
--------------------------------------------------------
--  DDL for Package Body MULTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."MULTA" AS
  PROCEDURE obtener_informacion_multas(p_resultado OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_resultado FOR
      SELECT
        M.MULTAID,
        M.PRESTAMOID,
        U.NOMBRE AS NOMBRE_USUARIO,
        M.MONTO,
        M.FECHACREACION,
        M.ESTADO
      FROM MULTAS M
      JOIN USUARIOS U ON M.USUARIOCEDULA = U.CEDULA;
  END obtener_informacion_multas;
END MULTA;

/
--------------------------------------------------------
--  DDL for Package Body PRESTAMOS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."PRESTAMOS" AS

  

  FUNCTION VerificarMultas(p_usuario_cedula IN NUMBER) RETURN BOOLEAN IS
    v_tiene_multas NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO v_tiene_multas
    FROM multas
    WHERE usuariocedula = p_usuario_cedula AND estado = 'Pendiente';

    RETURN v_tiene_multas > 0;
  END VerificarMultas;

 PROCEDURE CrearPrestamo(
    p_fecha_prestamo IN DATE,
    p_fecha_devolucion IN DATE,
    p_usuario_cedula IN NUMBER,
    p_libro_id IN NUMBER,
    p_resultado OUT NUMBER
  ) AS
    v_insertado BOOLEAN;
  BEGIN
    -- Inicializar la variable de resultado
    p_resultado := 0;

    -- Verificar la existencia de la cédula y multas antes de continuar
   

    IF VerificarMultas(p_usuario_cedula) THEN
      DBMS_OUTPUT.PUT_LINE('No se pudo crear el préstamo debido a multas pendientes.');
      RETURN;
    END IF;

    -- Llamar a la función InsertarPrestamo
    v_insertado := InsertarPrestamo(p_fecha_prestamo, p_fecha_devolucion, p_usuario_cedula, p_libro_id);

    -- Establecer la variable de resultado
    IF v_insertado THEN
      p_resultado := 1; -- Préstamo creado exitosamente
      DBMS_OUTPUT.PUT_LINE('Préstamo creado exitosamente.');
    ELSE
      DBMS_OUTPUT.PUT_LINE('No se pudo crear el préstamo por alguna razón.');
    END IF;
  END CrearPrestamo;


  PROCEDURE ObtenerPrestamos(p_Prestamos OUT SYS_REFCURSOR) IS
  BEGIN
    OPEN p_Prestamos FOR
      SELECT
        P.PrestamoID,
        P.FechaPrestamo,
        P.FechaDevolucion,
        U.apellido AS NombreUsuario,
        P.LibroID,
        L.Titulo AS TituloLibro
      FROM Prestamo P
      INNER JOIN Usuarios U ON P.UsuarioCedula = U.Cedula
      INNER JOIN Libros L ON P.LibroID = L.BookID;
  END ObtenerPrestamos;

END Prestamos;

/
--------------------------------------------------------
--  DDL for Package Body USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "ADMINPBIBLIOTECA"."USUARIO" AS


FUNCTION VerificarExistenciaCedula(p_usuario_cedula IN NUMBER) RETURN BOOLEAN IS
    v_existe NUMBER;
  BEGIN
    SELECT COUNT(*)
    INTO v_existe
    FROM Usuarios
    WHERE Cedula = p_usuario_cedula;

    RETURN v_existe > 0;
  END VerificarExistenciaCedula;


  -- Implementación de OBTENER_INFO_USUARIOS
  PROCEDURE OBTENER_INFO_USUARIOS (
    p_resultado OUT CURSOR_TYPE
  ) IS
  BEGIN
    OPEN p_resultado FOR
    SELECT U.CEDULA, U.NOMBRE, U.APELLIDO, U.EMAIL, R.NOMBRE_ROL AS ROL
    FROM USUARIOS U
    JOIN ROLES R ON U.ROLID = R.ROLID;
  END OBTENER_INFO_USUARIOS;

  -- Implementación de OBTENER_INFO_ROLES
  PROCEDURE OBTENER_INFO_ROLES (
    p_cursor OUT CURSOR_TYPE
  ) IS
  BEGIN
    OPEN p_cursor FOR
    SELECT * FROM vista_roles;
  END OBTENER_INFO_ROLES;

  -- Implementación de LLAMAR_INSERTAR_USUARIO
  PROCEDURE LLAMAR_INSERTAR_USUARIO(
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER,
    p_RESULTADO OUT VARCHAR2
  ) IS
  BEGIN
    p_RESULTADO := INSERTAR_USUARIO(p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
    -- No necesitas hacer COMMIT aquí, ya que el COMMIT debería manejarse fuera de esta llamada.
  END LLAMAR_INSERTAR_USUARIO;


  PROCEDURE ELIMINAR_USUARIO(
    p_CEDULA IN NUMBER
  ) IS
  BEGIN
    -- Implementación del procedimiento
    DELETE FROM USUARIOS WHERE CEDULA = p_CEDULA;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Éxito: Usuario eliminado correctamente.');
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Error: No se encontró un usuario con la cédula proporcionada.');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
  END ELIMINAR_USUARIO;









  -- Implementación de INSERTAR_USUARIO
  FUNCTION INSERTAR_USUARIO(
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER
  ) RETURN VARCHAR2 IS
    v_EXISTE NUMBER;
  BEGIN
    -- Verificar si ya existe un usuario con la misma cédula
    SELECT COUNT(*)
    INTO v_EXISTE
    FROM USUARIOS
    WHERE CEDULA = p_CEDULA;

    IF v_EXISTE = 0 THEN
      -- No existe, procedemos con la inserción
      INSERT INTO USUARIOS (NOMBRE, APELLIDO, EMAIL, CONTRASENA, ROLID, CEDULA)
      VALUES (p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
      COMMIT;

      -- Indicar que la operación fue exitosa
      RETURN 'Éxito: Usuario insertado correctamente.';
    ELSE
      -- Ya existe un usuario con la misma cédula
      -- Indicar que la operación falló y proporcionar un mensaje de error
      RETURN 'Error: Ya existe un usuario con la misma cédula.';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      -- Manejar otras excepciones aquí
      RETURN 'Error: Se produjo una excepción al insertar el usuario.';
  END INSERTAR_USUARIO;
  
  
  
  
  FUNCTION UsuarioFunction(
        p_cedula IN NUMBER,
        p_contrasena IN VARCHAR2
    ) RETURN BOOLEAN IS
        v_usuario_encontrado NUMBER := 0;
    BEGIN
        -- Lógica para verificar el inicio de sesión
        -- Puedes adaptar esta lógica según tus necesidades
        SELECT COUNT(*)
        INTO v_usuario_encontrado
        FROM usuarios
        WHERE CEDULA = p_cedula AND CONTRASENA = p_contrasena;

        RETURN v_usuario_encontrado = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
        WHEN OTHERS THEN
            RAISE;
    END UsuarioFunction;
  
  
  
 PROCEDURE IniciarSesionYObtenerUsuario(
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2,
    p_result OUT NUMBER
) IS
BEGIN
    -- Verificar el inicio de sesión
    p_result := CASE WHEN UsuarioFunction(p_cedula, p_contrasena) THEN 1 ELSE 0 END;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END IniciarSesionYObtenerUsuario;

    
  
   PROCEDURE ObtenerDatosUsuario(
      p_cedula IN NUMBER,
      p_roles OUT SYS_REFCURSOR
   ) AS
   BEGIN
      OPEN p_roles FOR
         SELECT U.CEDULA, U.NOMBRE, U.APELLIDO, U.EMAIL, U.CONTRASENA, R.NOMBRE_ROL AS ROL_NOMBRE
         FROM usuarios U
         JOIN roles R ON U.ROLID = R.ROLID
         WHERE U.CEDULA = p_cedula;
   END ObtenerDatosUsuario;
  
  
  
  
  
  
  
END Usuario;

/
--------------------------------------------------------
--  DDL for Function CALCULARMULTARETRASO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."CALCULARMULTARETRASO" (p_prestamo_id IN NUMBER) RETURN NUMBER IS
  multa NUMBER;
  fecha_devolucion DATE;
  fecha_limite_devolucion DATE;
  tarifa_diaria NUMBER := 0.50; -- Tarifa por día de retraso (ajustar según sea necesario)
BEGIN
  -- Obtener fechas relevantes para el préstamo


  -- Calcular la diferencia en días entre la fecha de devolución y la fecha límite
  multa := GREATEST(0, fecha_devolucion - fecha_limite_devolucion) * tarifa_diaria;

  RETURN multa;
END CalcularMultaRetraso;

/
--------------------------------------------------------
--  DDL for Function INSERTARPRESTAMO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."INSERTARPRESTAMO" (
  p_fecha_prestamo IN DATE,
  p_fecha_devolucion IN DATE,
  p_usuario_cedula IN NUMBER,
  p_libro_id IN NUMBER
) RETURN BOOLEAN AS
  v_insertado BOOLEAN := FALSE; -- Variable para indicar si se insertó el préstamo
BEGIN
  -- Verificar si el usuario tiene multas pendientes utilizando la función declarada anteriormente
  IF VerificarMultas(p_usuario_cedula) THEN
    -- Insertar el préstamo si el usuario no tiene multas
    INSERT INTO PRESTAMO(fechaprestamo, fechadevolucion, usuariocedula, libroid)
    VALUES (p_fecha_prestamo, p_fecha_devolucion, p_usuario_cedula, p_libro_id);

    v_insertado := TRUE; -- Indicar que se insertó el préstamo
  END IF;

  RETURN v_insertado; -- Devolver si se insertó el préstamo o no
END InsertarPrestamo;

/
--------------------------------------------------------
--  DDL for Function INSERTAR_USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."INSERTAR_USUARIO" (
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER
)
RETURN VARCHAR2
AS
    v_EXISTE NUMBER;
BEGIN
    -- Verificar si ya existe un usuario con la misma cédula
    SELECT COUNT(*)
    INTO v_EXISTE
    FROM USUARIOS
    WHERE CEDULA = p_CEDULA;

    IF v_EXISTE = 0 THEN
        -- No existe, procedemos con la inserción
        INSERT INTO USUARIOS (NOMBRE, APELLIDO, EMAIL, CONTRASENA, ROLID, CEDULA)
        VALUES (p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
        COMMIT;

        -- Indicar que la operación fue exitosa
        RETURN 'Éxito: Usuario insertado correctamente.';
    ELSE
        -- Ya existe un usuario con la misma cédula
        -- Indicar que la operación falló y proporcionar un mensaje de error
        RETURN 'Error: Ya existe un usuario con la misma cédula.';
    END IF;
END INSERTAR_USUARIO;

/
--------------------------------------------------------
--  DDL for Function INSERTARUSUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."INSERTARUSUARIO" (
  p_nombre IN VARCHAR2,
  p_apellido IN VARCHAR2,
  p_cedula IN NUMBER
) RETURN BOOLEAN AS
BEGIN
  -- Lógica para insertar el usuario en la tabla correspondiente
  INSERT INTO usuarios(nombre, apellido, cedula)
  VALUES (p_nombre, p_apellido, p_cedula);

  COMMIT;

  RETURN TRUE; -- La inserción fue exitosa
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE; -- Hubo un error durante la inserción
END InsertarUsuario;

/
--------------------------------------------------------
--  DDL for Function USUARIOFUNCTION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."USUARIOFUNCTION" (
    p_cedula IN NUMBER,
    p_contrasena IN VARCHAR2
) RETURN BOOLEAN
IS
    v_usuario_encontrado NUMBER := 0;
BEGIN
    SELECT COUNT(*)
    INTO v_usuario_encontrado
    FROM USUARIOS
    WHERE CEDULA = p_cedula AND CONTRASENA = p_contrasena;

    RETURN True;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RAISE;
END UsuarioFunction;

/
--------------------------------------------------------
--  DDL for Function VERIFICARMULTAS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."VERIFICARMULTAS" (p_usuario_cedula IN NUMBER) RETURN BOOLEAN AS
  v_tiene_multas NUMBER;
BEGIN
  SELECT COUNT(*)
  INTO v_tiene_multas
  FROM multas
  WHERE usuariocedula = p_usuario_cedula AND estado = 'Pendiente';

  IF v_tiene_multas > 0 THEN
    RETURN FALSE; -- El usuario tiene multas pendientes
  ELSE
    RETURN TRUE;  -- El usuario no tiene multas pendientes
  END IF;
END VerificarMultas;

/
--------------------------------------------------------
--  DDL for Function INSERTAR_USUARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."INSERTAR_USUARIO" (
    p_NOMBRE IN VARCHAR2,
    p_APELLIDO IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_CONTRASENA IN VARCHAR2,
    p_ROLID IN NUMBER,
    p_CEDULA IN NUMBER
)
RETURN VARCHAR2
AS
    v_EXISTE NUMBER;
BEGIN
    -- Verificar si ya existe un usuario con la misma cédula
    SELECT COUNT(*)
    INTO v_EXISTE
    FROM USUARIOS
    WHERE CEDULA = p_CEDULA;

    IF v_EXISTE = 0 THEN
        -- No existe, procedemos con la inserción
        INSERT INTO USUARIOS (NOMBRE, APELLIDO, EMAIL, CONTRASENA, ROLID, CEDULA)
        VALUES (p_NOMBRE, p_APELLIDO, p_EMAIL, p_CONTRASENA, p_ROLID, p_CEDULA);
        COMMIT;

        -- Indicar que la operación fue exitosa
        RETURN 'Éxito: Usuario insertado correctamente.';
    ELSE
        -- Ya existe un usuario con la misma cédula
        -- Indicar que la operación falló y proporcionar un mensaje de error
        RETURN 'Error: Ya existe un usuario con la misma cédula.';
    END IF;
END INSERTAR_USUARIO;

/
--------------------------------------------------------
--  DDL for Function INSERTARPRESTAMO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."INSERTARPRESTAMO" (
  p_fecha_prestamo IN DATE,
  p_fecha_devolucion IN DATE,
  p_usuario_cedula IN NUMBER,
  p_libro_id IN NUMBER
) RETURN BOOLEAN AS
  v_insertado BOOLEAN := FALSE; -- Variable para indicar si se insertó el préstamo
BEGIN
  -- Verificar si el usuario tiene multas pendientes utilizando la función declarada anteriormente
  IF VerificarMultas(p_usuario_cedula) THEN
    -- Insertar el préstamo si el usuario no tiene multas
    INSERT INTO PRESTAMO(fechaprestamo, fechadevolucion, usuariocedula, libroid)
    VALUES (p_fecha_prestamo, p_fecha_devolucion, p_usuario_cedula, p_libro_id);

    v_insertado := TRUE; -- Indicar que se insertó el préstamo
  END IF;

  RETURN v_insertado; -- Devolver si se insertó el préstamo o no
END InsertarPrestamo;

/
--------------------------------------------------------
--  DDL for Function VERIFICARMULTAS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "ADMINPBIBLIOTECA"."VERIFICARMULTAS" (p_usuario_cedula IN NUMBER) RETURN BOOLEAN AS
  v_tiene_multas NUMBER;
BEGIN
  SELECT COUNT(*)
  INTO v_tiene_multas
  FROM multas
  WHERE usuariocedula = p_usuario_cedula AND estado = 'Pendiente';

  IF v_tiene_multas > 0 THEN
    RETURN FALSE; -- El usuario tiene multas pendientes
  ELSE
    RETURN TRUE;  -- El usuario no tiene multas pendientes
  END IF;
END VerificarMultas;

/
--------------------------------------------------------
--  DDL for Synonymn DUAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PUBLIC SYNONYM "DUAL" FOR "SYS"."DUAL";
--------------------------------------------------------
--  DDL for Synonymn DBMS_OUTPUT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PUBLIC SYNONYM "DBMS_OUTPUT" FOR "SYS"."DBMS_OUTPUT";
--------------------------------------------------------
--  Constraints for Table AUTORES
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."AUTORES" ADD PRIMARY KEY ("AUTORID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DEVOLUCION
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."DEVOLUCION" ADD PRIMARY KEY ("DEVOLUCIONID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EDITORIALES
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."EDITORIALES" ADD PRIMARY KEY ("PUBLISHERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table GENEROS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."GENEROS" ADD PRIMARY KEY ("GENREID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IDIOMAS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."IDIOMAS" ADD PRIMARY KEY ("LANGUAGEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIBROS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."LIBROS" ADD PRIMARY KEY ("BOOKID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MULTAS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" MODIFY ("PRESTAMOID" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" MODIFY ("USUARIOCEDULA" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" MODIFY ("MONTO" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" MODIFY ("FECHACREACION" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" MODIFY ("ESTADO" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" ADD CHECK (Estado IN ('Cancelada', 'Pendiente')) ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" ADD PRIMARY KEY ("MULTAID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table NACIONALIDADES
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."NACIONALIDADES" ADD PRIMARY KEY ("NACIONALIDADID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRESTAMO
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" MODIFY ("FECHAPRESTAMO" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" MODIFY ("FECHADEVOLUCION" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" MODIFY ("USUARIOCEDULA" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" MODIFY ("LIBROID" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" ADD PRIMARY KEY ("PRESTAMOID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROLES
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."ROLES" MODIFY ("NOMBRE_ROL" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."ROLES" ADD PRIMARY KEY ("ROLID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USUARIOS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."USUARIOS" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."USUARIOS" MODIFY ("APELLIDO" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."USUARIOS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."USUARIOS" MODIFY ("CONTRASENA" NOT NULL ENABLE);
  ALTER TABLE "ADMINPBIBLIOTECA"."USUARIOS" ADD PRIMARY KEY ("CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table AUTORES
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."AUTORES" ADD CONSTRAINT "SYS_C007933" FOREIGN KEY ("NACIONALIDADID")
	  REFERENCES "ADMINPBIBLIOTECA"."NACIONALIDADES" ("NACIONALIDADID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DEVOLUCION
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."DEVOLUCION" ADD CONSTRAINT "FK_PRESTAMO_DEVOLUCION" FOREIGN KEY ("PRESTAMOID")
	  REFERENCES "ADMINPBIBLIOTECA"."PRESTAMO" ("PRESTAMOID") ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."DEVOLUCION" ADD CONSTRAINT "FK_USUARIO_DEVOLUCION" FOREIGN KEY ("USUARIOCEDULA")
	  REFERENCES "ADMINPBIBLIOTECA"."USUARIOS" ("CEDULA") ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."DEVOLUCION" ADD CONSTRAINT "FK_LIBRO_DEVOLUCION" FOREIGN KEY ("LIBROID")
	  REFERENCES "ADMINPBIBLIOTECA"."LIBROS" ("BOOKID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIBROS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."LIBROS" ADD CONSTRAINT "SYS_C007939" FOREIGN KEY ("AUTORID")
	  REFERENCES "ADMINPBIBLIOTECA"."AUTORES" ("AUTORID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."LIBROS" ADD CONSTRAINT "SYS_C007940" FOREIGN KEY ("GENEROID")
	  REFERENCES "ADMINPBIBLIOTECA"."GENEROS" ("GENREID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."LIBROS" ADD CONSTRAINT "SYS_C007941" FOREIGN KEY ("EDITORIALID")
	  REFERENCES "ADMINPBIBLIOTECA"."EDITORIALES" ("PUBLISHERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."LIBROS" ADD CONSTRAINT "SYS_C007942" FOREIGN KEY ("IDIOMAID")
	  REFERENCES "ADMINPBIBLIOTECA"."IDIOMAS" ("LANGUAGEID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MULTAS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" ADD CONSTRAINT "FK_PRESTAMO" FOREIGN KEY ("PRESTAMOID")
	  REFERENCES "ADMINPBIBLIOTECA"."PRESTAMO" ("PRESTAMOID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."MULTAS" ADD CONSTRAINT "FK_USUARIO_MULTA" FOREIGN KEY ("USUARIOCEDULA")
	  REFERENCES "ADMINPBIBLIOTECA"."USUARIOS" ("CEDULA") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRESTAMO
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" ADD CONSTRAINT "FK_LIBRO" FOREIGN KEY ("LIBROID")
	  REFERENCES "ADMINPBIBLIOTECA"."LIBROS" ("BOOKID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ADMINPBIBLIOTECA"."PRESTAMO" ADD CONSTRAINT "FK_USUARIO" FOREIGN KEY ("USUARIOCEDULA")
	  REFERENCES "ADMINPBIBLIOTECA"."USUARIOS" ("CEDULA") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USUARIOS
--------------------------------------------------------

  ALTER TABLE "ADMINPBIBLIOTECA"."USUARIOS" ADD CONSTRAINT "FK_ROL" FOREIGN KEY ("ROLID")
	  REFERENCES "ADMINPBIBLIOTECA"."ROLES" ("ROLID") ENABLE;
